import sys

from src.components.data_ingestion import DataIngestion
from src.components.model_trainer import ModelTrainer
from src.entity.artifact_entity import DataIngestionArtifact
from src.entity.config_entity import DataIngestionConfig, PipelineConfig
from src.exception import CustomException
from src.logger import logging


class TrainPipeline:
    is_pipeline_running: bool = False

    def __init__(self):
        self.pipeline_config = PipelineConfig()

    def start_data_ingestion(self) -> DataIngestionArtifact:
        """
        This function initiates data ingestion using a DataIngestion object and returns the resulting
        DataIngestionArtifact.
        
        Returns:
          The method `start_data_ingestion` is returning a `DataIngestionArtifact`.
        """
        logging.info("Entered start_data_ingestion method of TrainPipeline class")

        try:
            self.data_ingestion_config = DataIngestionConfig(
                pipeline_config=self.pipeline_config
            )

            logging.info(f"Got {self.data_ingestion_config} data ingestion config")

            data_ingestion = DataIngestion(
                data_ingestion_config=self.data_ingestion_config
            )

            data_ingestion_artifact = data_ingestion.initiate_data_ingestion()

            logging.info(
                f"Completed data ingestion with {data_ingestion_artifact} as artifact"
            )

            logging.info("Exited start_data_ingestion method of TrainPipeline class")

            return data_ingestion_artifact

        except Exception as e:
            raise CustomException(e, sys)

    def start_model_training(self, data_ingestion_artifact: DataIngestionArtifact) -> str:
        """
        This function starts the model training process using a DataIngestionArtifact and returns the
        resulting model trainer artifact.
        
        Args:
          data_ingestion_artifact (DataIngestionArtifact): DataIngestionArtifact is an object that contains
        the necessary data for training the model. It could include data files, data preprocessing steps,
        and other relevant information needed for the training process. This object is passed as a parameter
        to the ModelTrainer class, which uses it to initiate the model training
        
        Returns:
          The method is returning a string which is the artifact generated by the `ModelTrainer` class after
        completing the model training process.
        """
        logging.info("Entered start_model_training method of TrainPipeline class")

        try:
            model_trainer = ModelTrainer(
                data_ingestion_artifact=data_ingestion_artifact
            )

            logging.info("Initialised ModelTrainer class")

            model_trainer_artifact: str = model_trainer.initiate_model_training()

            logging.info(
                f"Completed model training with {model_trainer_artifact} as artifacts"
            )

            logging.info("Exited start_model_training method of TrainPipeline class")

            return model_trainer_artifact

        except Exception as e:
            raise CustomException(e, sys)

    def run_pipeline(self):
        """
        This function runs a pipeline for training a model, which includes data ingestion and model
        training, and logs any errors that occur.
        """
        logging.info("Entered run_pipeline method of TrainPipeline class")

        try:
            TrainPipeline.is_pipeline_running = True

            data_ingestion_artifact: DataIngestionArtifact = self.start_data_ingestion()

            model_trainer_artifact: str = self.start_model_training(
                data_ingestion_artifact=data_ingestion_artifact
            )

            logging.info("Exited run_pipeline method of TrainPipeline class")

        except Exception as e:
            raise CustomException(e, sys)
